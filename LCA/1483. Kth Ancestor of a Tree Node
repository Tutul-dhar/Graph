problem link: https://leetcode.com/problems/kth-ancestor-of-a-tree-node/

class TreeAncestor {
public:
    int nn;
    vector<int> g[50010];
    int up[50010][20];
    void dfs(int node,int par) {
        up[node][0] = par;
        for(int i = 1; i < 19; i++) {
            if(up[node][i-1] != -1) up[node][i] = up[up[node][i-1]][i-1];
        }
        for(int ch : g[node]) {
            if(ch != par) dfs(ch,node);
        }
    }
    TreeAncestor(int n, vector<int>& parent) {
        nn = n;
        memset(up,-1,sizeof up);
        for(int i = 1; i < parent.size(); i++) {
            g[parent[i]].push_back(i);
            g[i].push_back(parent[i]);
        }
        dfs(0,-1);
    }
    
    int getKthAncestor(int node, int k) {
        int u = node;
        for(int i = 18; i >= 0; i--) {
            if(((k >> i)&1)) {
                u = up[u][i];
                k -= (1<<i);
                if(u == -1) break;
            }
        }
        return u;
    }
};

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor* obj = new TreeAncestor(n, parent);
 * int param_1 = obj->getKthAncestor(node,k);
 */
