class Solution {
public:
    const int LOG = 20;
    vector<int> tree[10005];
    int up[10005][20]; 
    int depth[10005],a[10005][30];
    map<pair<int,int>,int> w;
    void dfs(int node, int parent) {
        up[node][0] = parent; 
        for (int i = 1; i < LOG; i++) {
            if (up[node][i - 1] != -1) {
                up[node][i] = up[up[node][i - 1]][i - 1];
            } else {
                up[node][i] = -1;
            }
        }

        for (int child : tree[node]) {
            if (child != parent) {
                depth[child] = depth[node] + 1;
                dfs(child, node);
            }
        }
    }

    int lca(int u, int v) {
        if (depth[u] < depth[v]) {
            swap(u, v);
        }

        // Lift u to the same level as v
        int diff = depth[u] - depth[v];
        for (int i = 0; i < LOG; i++) {
            if (diff & (1 << i)) {
                u = up[u][i];
            }
        }

        if (u == v) {
            return u;
        }

        // Binary lifting to find LCA
        for (int i = LOG - 1; i >= 0; i--) {
            if (up[u][i] != up[v][i]) {
                u = up[u][i];
                v = up[v][i];
            }
        }

        return up[u][0];
    }
    void dfs1(int node,int par) {
        if(par != -1) {
            for(int i = 1; i <= 26; i++) {
                a[node][i] = a[par][i] + (w[{node,par}] == i);
            }
        }
        for(int ch : tree[node]) {
            if(ch != par) dfs1(ch,node);
        }
    }
    vector<int> minOperationsQueries(int n, vector<vector<int>>& edges,vector<vector<int>>& queries) {
        for(auto it : edges) {
            tree[it[0]].push_back(it[1]);
            tree[it[1]].push_back(it[0]);
            w[{it[0],it[1]}] = it[2];
            w[{it[1],it[0]}] = it[2];
        }
        memset(up,-1,sizeof up);
        memset(a,0,sizeof a);
        dfs(0,-1);
        dfs1(0,-1);
        vector<int> ans;
        for(auto it : queries) {
            int lc = lca(it[0],it[1]);
            //cout << it[0] << ' ' << it[1] << ' ' << lc << endl;
            int mx = 0,len = depth[it[0]] + depth[it[1]] - 2*depth[lc];
            for(int i = 1; i <= 26; i++) {
                //cout << a[it[0]][i] << ' ' << a[it[1]][i] << endl;
                int e = a[it[0]][i] + a[it[1]][i] - 2*a[lc][i];
                mx = max(mx,e);
            }
            //cout << len << ' ' << mx << endl;
            ans.push_back(len - mx);
        }
        return ans;
    }
    
};
