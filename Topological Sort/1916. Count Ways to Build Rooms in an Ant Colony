problem link: https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony/

/*
The problems basically boils down to finding number of toplogical orderings of the directed tree. The problem can be solved this way, let's say the node 'r' has children 'ch1', 'ch2' and 'ch3' and let's say their sizes are n1, n2, n3. We compute topological orderings of each subtree first.

Then topological ordering of node 'r' can computed as:
Top(r) = (#ordering of nodes in subtree rooted at r) * Top(ch1) * Top(ch2) * Top(ch3)
#ordering of nodes = fact(n1 + n2 + n3) / (fact[n1] * fact[n2] * fact[n3])
*/


#define mod 1000000007
class Solution {
public:
    int fact[100100], ans[100100], sz[100100];
    vector<int> g[100100];
    void pre(int n) {
        fact[0] = 1;
        ans[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (fact[i - 1] * 1ll * i) % mod;
            ans[i] = 1;
        }
    }
    int bigmod(int a, int p, int M) {
        p %= (M - 1);
        int result = 1LL;
        while (p > 0) {
            if ((p & 1))
                result = (result * 1ll * a) % M;
            a = (a * 1ll * a) % M;
            p >>= 1;
        }
        return result;
    }
    void dfs(int node) {
        int prod1 = 1;
        sz[node] = 1;
        for (int ch : g[node]) {
            dfs(ch);
            sz[node] += sz[ch];
            ans[node] = (ans[ch] * 1ll * ans[node]) % mod;
            prod1 = (prod1 * 1ll * fact[sz[ch]]) % mod;
        }
        ans[node] = (ans[node] * 1ll * fact[sz[node] - 1]) % mod;
        ans[node] = (ans[node] * 1ll * bigmod(prod1, mod - 2, mod)) % mod;
    }
    int waysToBuildRooms(vector<int>& prevRoom) {
        int n = prevRoom.size();
        for (int i = 1; i < n; i++) {
            g[prevRoom[i]].push_back(i);
        }
        pre(n);
        dfs(0);
        return ans[0];
    }
};
